import { useState, useEffect, useCallback } from 'react';
import { AppRoot, Cell, List, Button, Progress } from '@telegram-apps/telegram-ui';
import { FaChevronRight } from 'react-icons/fa';
import { useNavigate } from 'react-router-dom';
import styles from './ServicePage.module.css';

interface Service {
  ServiceID: string;
  Name: string;
  Description: string;
  Price: number;
  Duration: number;
}

// ‚è¨ –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
export const ServicePage = () => {
  const [services, setServices] = useState<Service[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedService, setSelectedService] = useState<string | null>(null);
  const navigate = useNavigate();

  const API_URL = import.meta.env.VITE_API_URL || "http://localhost:8080/api/v1";

  useEffect(() => {
    const fetchServices = async () => {
      try {
        console.log("üîç API URL:", API_URL); // –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const response = await fetch(`${API_URL}/services`);
        const result = await response.json();
  
        if (result.status === "success" && Array.isArray(result.data)) {
          setServices(result.data);
        } else {
          console.error("‚ùå API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", result);
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Å–ª—É–≥:", error);
      } finally {
        setLoading(false);
      }
    };
  
    fetchServices();
  }, []);

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
  const handleSelectService = useCallback((serviceId: string) => {
    setSelectedService((prev) => (prev === serviceId ? null : serviceId));
  }, []);

  return (
    <AppRoot>
      {/* ‚úÖ –õ–∏–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è) */}
      <div className={styles.progressBar}>
        <Progress value={selectedService ? 40 : 20} />
      </div>

      <div className={styles.container}>
        <h1 className={styles.title}>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É</h1>

        {loading ? (
          <p className={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        ) : services.length > 0 ? (
          <List className={styles.list}>
            {services.map((service) => (
              <Cell
                key={service.ServiceID}
                className={`${styles.serviceCard} ${selectedService === service.ServiceID ? styles.selected : ''}`}
                subtitle={
                  selectedService === service.ServiceID
                    ? <span className={styles.selectedSubtitle}>‚úÖ –í—ã–±—Ä–∞–Ω–æ</span> // ‚úÖ –£–ª—É—á—à–µ–Ω–æ –≤–∏–∑—É–∞–ª—å–Ω–æ
                    : `${service.Duration} –º–∏–Ω ¬∑ ${service.Price} —Ä—É–±`
                }
                after={<FaChevronRight className={styles.chevron} />}
                onClick={() => handleSelectService(service.ServiceID)}
              >
                <span className={styles.serviceName}>{service.Name}</span>
              </Cell>
            ))}
          </List>
        ) : (
          <p className={styles.noServicesText}>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥</p>
        )}

        {/* ‚úÖ –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ) */}
        <div className={styles.footer}>
          <Button
            size="l"
            className={styles.continueButton}
            disabled={!selectedService}
            onClick={() => navigate('/next-step', { state: { serviceId: selectedService } })} // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º `state`
          >
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
          </Button>
          <Button
            size="l"
            color="secondary"
            className={styles.continueButton}
            onClick={() => navigate(-1)}
          >
            –ù–∞–∑–∞–¥
          </Button>
        </div>
      </div>
    </AppRoot>
  );
};
