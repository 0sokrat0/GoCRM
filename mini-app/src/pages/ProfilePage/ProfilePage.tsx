import { FC, useMemo, useEffect, useState, useCallback } from "react";
import { Layout } from "@/components/Layout";
import { DisplayData, type DisplayDataRow } from "@/components/DisplayData/DisplayData";
import { useSignal, initData, type User, backButton } from "@telegram-apps/sdk-react";
import { Avatar, List, Button } from "@telegram-apps/telegram-ui";
import { TypeAnimation } from "react-type-animation";
import { getUserByTelegramID } from "@/api/userApi";
import { requestContact } from "@telegram-apps/sdk";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function getUserRows(
  user: User,
  phone: string | null,
  handlePhoneRequest: () => void,
  loadingPhone: boolean
): DisplayDataRow[] {
  const rows: DisplayDataRow[] = [
    { title: "ID", value: user.id.toString() },
    { title: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value: user.username || "–ù–µ —É–∫–∞–∑–∞–Ω–æ" },
    { title: "–ò–º—è", value: user.firstName || "–ù–µ —É–∫–∞–∑–∞–Ω–æ" },
    { title: "–§–∞–º–∏–ª–∏—è", value: user.lastName || "–ù–µ —É–∫–∞–∑–∞–Ω–æ" },
  ];

  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–µ–Ω ‚Äì –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∫–Ω–æ–ø–∫—É –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞
  rows.push({
    title: "–¢–µ–ª–µ—Ñ–æ–Ω",
    value: phone ? phone : (
      <Button 
        size="m" 
        onClick={handlePhoneRequest} 
        loading={loadingPhone}
        className="w-full"
      >
        –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä
      </Button>
    ),
  });

  return rows;
}

export const ProfilePage: FC = () => {
  const initDataState = useSignal(initData.state);
  const [phone, setPhone] = useState<string | null>(null);
  const [loadingPhone, setLoadingPhone] = useState<boolean>(false);

  useEffect(() => {
    if (window.Telegram && window.Telegram.WebApp) {
      console.log("Telegram WebApp is initialized!");
    } else {
      console.log("Telegram WebApp is NOT initialized!");
    }
  }, []);

  useEffect(() => {
    if (backButton.isSupported()) {
      console.log("Back Button is supported!");
      backButton.mount();
      console.log("Back Button mounted:", backButton.isMounted());
      backButton.show();
      console.log("Back Button visible:", backButton.isVisible());
    } else {
      console.log("Back Button is NOT supported!");
    }
  }, []);

  useEffect(() => {
    const handleBackButtonClick = () => {
      console.log("Back button clicked!");
      window.history.back();
    };

    if (backButton.isSupported()) {
      backButton.onClick(handleBackButtonClick);
    }

    return () => {
      if (backButton.isSupported()) {
        backButton.offClick(handleBackButtonClick);
      }
    };
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
  const updateUserData = useCallback(async () => {
    if (!initDataState || !initDataState.user) return;
    try {
      const updatedUser = await getUserByTelegramID(initDataState.user.id);
      setPhone(updatedUser.Phone);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    }
  }, [initDataState]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    updateUserData();
  }, [updateUserData]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º requestContact
  const handlePhoneRequest = useCallback(async () => {
    console.log("Button clicked: Requesting phone number");
    
    if (!requestContact.isAvailable()) {
      console.error("–ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
      return;
    }
    
    try {
      setLoadingPhone(true);
      console.log("Starting contact request...");
      
      const contactData = await requestContact();
      console.log("Contact data received:", contactData);
      
      if (contactData && contactData.contact && contactData.contact.phone_number) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é
        setPhone(contactData.contact.phone_number);
        
        // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–æ–≤ API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        console.log("Phone number set:", contactData.contact.phone_number);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", error);
    } finally {
      setLoadingPhone(false);
    }
  }, []);

  const userRows = useMemo<DisplayDataRow[] | undefined>(() => {
    return initDataState && initDataState.user
      ? getUserRows(initDataState.user, phone, handlePhoneRequest, loadingPhone)
      : undefined;
  }, [initDataState, phone, handlePhoneRequest, loadingPhone]);

  return (
    <Layout>
      <div className="bg-white/10 backdrop-blur-lg rounded-3xl p-4 sm:p-6 shadow-md border border-white/20 transition-transform duration-200 hover:scale-105 max-w-3xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
        <h1 className="text-2xl sm:text-3xl font-bold text-[var(--tg-theme-text-color)] mb-4 text-center">
          –ü—Ä–æ—Ñ–∏–ª—å
        </h1>
        
        {/* –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä */}
        <div className="flex justify-center mb-4">
          <Avatar
            size={96}
            src={initDataState?.user?.photoUrl}
            className="border-2 border-[var(--tg-theme-hint-color)]/30 shadow-md w-20 h-20 sm:w-24 sm:h-24"
          />
        </div>
        
        {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø–µ—á–∞—Ç–∞–Ω–∏—è */}
        <div className="mb-6 text-center">
          <TypeAnimation
            sequence={[
              `–ü—Ä–∏–≤–µ—Ç, ${initDataState?.user?.username || initDataState?.user?.firstName || "–¥—Ä—É–≥"}! üëã`,
              2000
            ]}
            wrapper="span"
            cursor={true}
            repeat={0}
            className="text-lg sm:text-xl font-medium text-[var(--tg-theme-text-color)]"
          />
        </div>
        
        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        {userRows ? (
          <List className="rounded-2xl sm:rounded-3xl overflow-hidden border border-[var(--tg-theme-hint-color)]/20 bg-[var(--tg-theme-secondary-bg-color)] bg-opacity-30 backdrop-blur-sm">
            <DisplayData header="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ" rows={userRows} />
          </List>
        ) : (
          <div className="text-center text-[var(--tg-theme-hint-color)]">
            –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.
          </div>
        )}
      </div>
    </Layout>
  );
};