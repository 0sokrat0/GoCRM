package db

import (
	"context"
	"fmt"
	"log"
	"os"
	"testing"
	"time"

	"github.com/testcontainers/testcontainers-go"
	tcpostgres "github.com/testcontainers/testcontainers-go/modules/postgres"
	"github.com/testcontainers/testcontainers-go/wait"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

var testDB Database // ‚úÖ –ë—ã–ª–æ `Service`, —Ç–µ–ø–µ—Ä—å `Database`

// mustStartPostgresContainer –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å PostgreSQL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä –∏ DSN.
func mustStartPostgresContainer() (func(), string, error) {
	dbName := "testdb"
	dbUser := "testuser"
	dbPwd := "testpass"

	// –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å Postgres
	dbContainer, err := tcpostgres.Run(
		context.Background(),
		"postgres:latest",
		tcpostgres.WithDatabase(dbName),
		tcpostgres.WithUsername(dbUser),
		tcpostgres.WithPassword(dbPwd),
		testcontainers.WithWaitStrategy(
			wait.ForLog("database system is ready to accept connections").
				WithOccurrence(2).
				WithStartupTimeout(10*time.Second)), // ‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
	)
	if err != nil {
		return nil, "", err
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	dbHost, err := dbContainer.Host(context.Background())
	if err != nil {
		return func() { dbContainer.Terminate(context.Background()) }, "", err
	}

	dbPort, err := dbContainer.MappedPort(context.Background(), "5432/tcp")
	if err != nil {
		return func() { dbContainer.Terminate(context.Background()) }, "", err
	}

	// ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π DSN
	dsn := fmt.Sprintf(
		"host=%s user=%s password=%s dbname=%s port=%s sslmode=disable",
		dbHost, dbUser, dbPwd, dbName, dbPort.Port(),
	)

	return func() { dbContainer.Terminate(context.Background()) }, dsn, nil
}

// TestMain ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞–Ω–Ω–µ—Ä.
func TestMain(m *testing.M) {
	teardown, dsn, err := mustStartPostgresContainer()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å Postgres: %v", err)
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º GORM –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
	testDB = newTestDatabase(dsn)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
	code := m.Run()

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	testDB.Close()
	teardown()

	os.Exit(code) // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
}

// newTestDatabase —Å–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å GORM –¥–ª—è —Ç–µ—Å—Ç–æ–≤.
func newTestDatabase(dsn string) Database { // ‚úÖ –ë—ã–ª–æ `Service`, —Ç–µ–ø–µ—Ä—å `Database`
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
	}

	return &database{db: db} // ‚úÖ –ë—ã–ª–æ `&service{db: db}`
}

// üîç **–¢–µ—Å—Ç –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è**
func TestNew(t *testing.T) {
	if testDB == nil {
		t.Fatal("‚ùå New() –≤–µ—Ä–Ω—É–ª nil")
	}
}

// üîç **–¢–µ—Å—Ç –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ –ë–î**
func TestHealth(t *testing.T) {
	stats := testDB.Health()

	if stats["status"] != "up" {
		t.Fatalf("‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 'up', –ø–æ–ª—É—á–µ–Ω–æ: %s", stats["status"])
	}

	if _, ok := stats["error"]; ok {
		t.Fatalf("‚ùå –ù–µ –æ–∂–∏–¥–∞–ª–∏ –æ—à–∏–±–∫—É –≤ health check")
	}

	if stats["message"] != "–ë–î –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏" {
		t.Fatalf("‚ùå –û–∂–∏–¥–∞–ª–∏ '–ë–î –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏', –ø–æ–ª—É—á–∏–ª–∏: %s", stats["message"])
	}
}

// üîç **–¢–µ—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è**
func TestClose(t *testing.T) {
	err := testDB.Close()
	if err != nil {
		t.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î: %v", err)
	}

	sqlDB, _ := testDB.DB().DB() // ‚úÖ –ü–æ–ª—É—á–∞–µ–º `sql.DB` –∏–∑ GORM
	if err := sqlDB.Ping(); err == nil {
		t.Fatalf("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–∫—Ä—ã–ª–∞—Å—å, Ping() –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å")
	}
}
