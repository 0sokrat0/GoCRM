package db

import (
	"GoCRM/internal/config"
	"GoCRM/migrations/models"

	zlogger "GoCRM/pkg/logger"
	"fmt"
	"log"
	"time"

	"go.uber.org/zap"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

type Database interface {
	Health() map[string]string
	Close() error
	DB() *gorm.DB
}

type database struct {
	db *gorm.DB
}

func NewDatabase(cfg *config.DatabaseConfig) (Database, error) {
	dsn := fmt.Sprintf(
		"host=%s user=%s password=%s dbname=%s port=%d sslmode=%s search_path=%s",
		cfg.Host, cfg.User, cfg.Password, cfg.Name, cfg.Port, cfg.SSLMode, cfg.Schema,
	)

	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Warn),
	})
	if err != nil {
		return nil, fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %w", err)
	}

	sqlDB, err := db.DB()
	if err != nil {
		return nil, fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SQL DB: %w", err)
	}
	sqlDB.SetMaxOpenConns(50)
	sqlDB.SetMaxIdleConns(10)
	sqlDB.SetConnMaxLifetime(5 * time.Minute)

	if config.GetConfig().App.Env != "production" {
		zlogger.Warn("‚ö†Ô∏è  –ó–∞–ø—É—Å–∫–∞–µ–º AutoMigrate (dev mode)...")
		if err := db.AutoMigrate(
			&models.User{},
			&models.Service{},
		); err != nil {
			zlogger.Fatal("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: %v", zap.Error(err))
		}
		zlogger.Info("‚úÖ AutoMigrate —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω")
	} else {
		zlogger.Warn("üöÄ –ü—Ä–æ–¥–∞–∫—à–µ–Ω-—Ä–µ–∂–∏–º: AutoMigrate –æ—Ç–∫–ª—é—á—ë–Ω")
	}

	zlogger.Info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
	return &database{db: db}, nil
}

func (d *database) Health() map[string]string {
	stats := make(map[string]string)
	sqlDB, err := d.db.DB()
	if err != nil {
		stats["status"] = "down"
		stats["error"] = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SQL DB"
		log.Println(stats["error"])
		return stats
	}

	err = sqlDB.Ping()
	if err != nil {
		stats["status"] = "down"
		stats["error"] = fmt.Sprintf("–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: %v", err)
		log.Println(stats["error"])
		return stats
	}

	stats["status"] = "up"
	stats["message"] = "–ë–î –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
	return stats
}

func (d *database) Close() error {
	sqlDB, err := d.db.DB()
	if err != nil {
		zlogger.Warn("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SQL DB:", zap.Error(err))
		return err
	}
	zlogger.Warn("‚õî –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î")
	return sqlDB.Close()
}

func (d *database) DB() *gorm.DB {
	return d.db
}
