package usecase

import (
	"GoCRM/internal/domain/user/entity"
	"GoCRM/internal/domain/user/repo"
	"context"
	"fmt"

	"github.com/google/uuid"
)

type UserService struct {
	userRepo repo.UserRepository
}

// ‚úÖ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–∞
func NewUserService(r repo.UserRepository) *UserService {
	return &UserService{userRepo: r}
}

// ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è// ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (us *UserService) GetOrCreateTelegramUser(
	ctx context.Context,
	tgID int64,
	username string,
	clientName string,
	firstName string,
	lastName string,
	languageCode string,
	phone string,
) (*entity.User, error) {
	// üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ Telegram ID
	user, err := us.userRepo.GetByTelegramID(ctx, tgID)
	if err != nil {
		return nil, err
	}

	if user != nil {
		// üîπ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user.UpdateFromTelegram(username, firstName, lastName, languageCode, phone)
		_, err = us.userRepo.Update(ctx, user)
		return user, err
	}

	// üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
	if phone != "" {
		existingUser, err := us.userRepo.GetByPhone(ctx, phone)
		if err != nil {
			return nil, err
		}
		if existingUser != nil {
			return nil, fmt.Errorf("user with this phone number already exists")
		}
	}

	// üîπ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	newUser, err := entity.NewTelegramUser(tgID, username, clientName, firstName, lastName, languageCode, phone, true)
	if err != nil {
		return nil, err
	}

	err = us.userRepo.Create(ctx, newUser)
	return newUser, err
}

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
func (us *UserService) GetUserByTelegramID(ctx context.Context, tgID int64) (*entity.User, error) {
	return us.userRepo.GetByTelegramID(ctx, tgID)
}

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (us *UserService) UpdateUserSession(ctx context.Context, tgID int64, sessionHash string) error {
	user, err := us.userRepo.GetByTelegramID(ctx, tgID)
	if err != nil {
		return err
	}

	// üîπ –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
	user.UpdateSession(sessionHash)

	// üîπ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫—É
	_, err = us.userRepo.Update(ctx, user)
	return err
}

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
func (us *UserService) GetUserByID(ctx context.Context, id uuid.UUID) (*entity.User, error) {
	return us.userRepo.GetByID(ctx, id)
}
